import com.amazonaws.services.s3.model.CannedAccessControlList
import com.neo4j.gradle.asciidoctor.AsciidoctorModuleDescriptorGenerateTask
import com.neo4j.gradle.asciidoctor.AsciidoctorModuleDescriptorPlugin
import com.neo4j.gradle.s3.S3Plugin
import com.neo4j.gradle.s3.S3UploadTask
import org.asciidoctor.gradle.jvm.AsciidoctorTask
import org.asciidoctor.gradle.jvm.pdf.AsciidoctorPdfTask
import org.asciidoctor.gradle.jvm.slides.AsciidoctorJRevealJSTask
import org.kordamp.gradle.livereload.LiveReloadTask

plugins {
  id 'org.asciidoctor.jvm.gems' version '3.1.0' apply false
  id 'org.asciidoctor.jvm.convert' version '3.1.0' apply false
  id 'org.asciidoctor.jvm.pdf' version '3.1.0' apply false
  id 'org.asciidoctor.jvm.revealjs' version '3.1.0' apply false
  id 'org.kordamp.gradle.livereload' version '0.2.1' apply false
  id 'com.neo4j.gradle.s3.S3Plugin' version '0.1.1' apply false
}

subprojects {

  apply plugin: 'org.asciidoctor.jvm.gems'
  apply plugin: 'org.asciidoctor.jvm.revealjs'
  apply plugin: S3Plugin
  apply plugin: AsciidoctorModuleDescriptorPlugin

  repositories {
    mavenCentral()
    jcenter()
    ruby {
      gems()
    }
  }

  dependencies {
    asciidoctorGems 'rubygems:rouge:3.18.0'
    asciidoctorGems 'rubygems:neo4j-asciidoctor-extensions:0.3.1'
    asciidoctorGems 'rubygems:asciidoctor-include-ext:0.3.1'
  }

  def stage = project.findProperty('stage')

  s3 {
    profile = project.hasProperty('s3-profile') ? project.property('s3-profile') : 'default'
    region = project.hasProperty('s3-region') ? project.property('s3-region') : 'us-east-1'
  }

  asciidoctorj {
    gemPaths "${rootProject.buildDir}/.asciidoctorGems"
    attributes 'allow-uri-read': '',
      'stage': stage != null ? stage : '',
      'source-highlighter': 'rouge',
      'rouge-style': 'neo.forest',
      'presenter': 'Neo Technology',
      'twitter': 'neo4j',
      'email': 'info@neotechnology.com',
      'neo4j-version': '4.0',
      'currentyear': '2020',
      'experimental': '',
      'manual': 'http://neo4j.com/docs/developer-manual/current',
      'manual-cypher': '{manual}/cypher',
      'document-metadata-attrs-include': 'author,slug,parent-path,categories*,tags*,taxonomies*<>',
      'module-descriptor-path': "${projectDir}/build/online/asciidoctor-module-descriptor.yml"
  }

  asciidoctorGemsPrepare.with {
    outputDir = "${rootProject.buildDir}/.asciidoctorGems"
  }

  revealjs {
    version = '4.0.1'
    templateGitHub {
      organisation = 'hakimel'
      repository = 'reveal.js'
      tag = '3.9.2'
    }
  }

  revealjsPlugins {
    github 'denehyg', {
      organisation = 'denehyg'
      repository = 'reveal.js-menu'
      branch = 'master'
    }
    github 'rajgoel', {
      organisation = 'rajgoel'
      repository = 'reveal.js-plugins'
      branch = 'master'
    }
  }

  afterEvaluate { Project project ->
    def sourceImagesDirPath = project.hasProperty("antoraStructure") ? "${projectDir}/modules/ROOT/images" : "${projectDir}/images"
    def sourceDocsRootPath = project.hasProperty("antoraStructure") ? "${projectDir}/modules/ROOT/pages" : "${projectDir}/docs"

    task generateModuleDescriptor(type: AsciidoctorModuleDescriptorGenerateTask) {
      source = fileTree(dir: sourceDocsRootPath, include: '**/*.adoc', excludes: ['enrollment.adoc', 'setup.adoc'])
      outputDir "${projectDir}/build/online"
      moduleName stage != 'production' ? "_testing_${project.name}" : project.name
    }

    // for debugging purpose
    task convertStandaloneHtml(type: AsciidoctorTask) {
      dependsOn asciidoctorGemsPrepare, generateModuleDescriptor

      inputs.dir "${rootProject.projectDir}/resources/templates"

      asciidoctorj {
        options template_dirs: ["${rootProject.projectDir}/resources/templates"]
        attributes 'imagesdir': 'images',
          'sectanchors': ''
      }

      baseDir file(sourceDocsRootPath)
      sourceDir file(sourceDocsRootPath)
      sources {
        excludes.addAll(['enrollment.adoc', 'setup.adoc'])
      }
      outputDir file("${projectDir}/build/standalone")

      resources {
        from("${rootProject.projectDir}/resources/images") {
          include '**'
          into 'images'
        }
        from(sourceImagesDirPath) {
          include '**'
          into 'images'
        }
      }
    }

    if (project.projectDir.parentFile.getName() == "browser-guides") {
      task convertBrowserGuideHtml(type: AsciidoctorTask) {
        dependsOn asciidoctorGemsPrepare

        inputs.dir "${rootProject.projectDir}/resources/templates/browser-guide"

        def baseUrl = {
          switch (stage) {
            case 'production':
              return "https://guides.neo4j.com/${project.name}"
            case 'preview':
              return "http://localhost:35729/browser-guide"
            default:
              return "./${project.name}"
          }
        }

        def imagesDir = {
          switch (stage) {
            case 'production':
              return "https://guides.neo4j.com/${project.name}/images"
            case 'preview':
              return "http://localhost:35729/browser-guide/images"
            default:
              return "./${project.name}/images"
          }
        }

        asciidoctorj {
          requires "${rootProject.projectDir}/resources/extensions/antora_include_resolver.rb"
          options template_dirs: ["${rootProject.projectDir}/resources/templates/browser-guide"]
          attributes 'imagesdir': imagesDir,
            'allow-uri-read': '',
            'guides': baseUrl,
            'icons': 'font',
            'current': baseUrl,
            'csv-url': baseUrl,
            'leveloffset': '+1',
            'env-guide': '',
            'env-training': '',
            'guide': '',
            'sectanchors': ''
        }

        resources {
          from(sourceImagesDirPath) {
            include '**'
            into 'images'
          }
        }

        baseDir file(sourceDocsRootPath)
        sourceDir file(sourceDocsRootPath)
        outputDir file("${projectDir}/build/browser-guide")
      }

      if (new File(sourceImagesDirPath).exists()) {
        if (stage == 'production') {
          task s3UploadContent(type: S3UploadTask) {
            dependsOn convertBrowserGuideHtml

            // uncomment this if you want to replace files in guides.neo4j.com
            overwrite = true
            source = "${projectDir}/build/browser-guide"
            bucket = "guides.neo4j.com/${project.name}"
            destination = ""
            acl.set(CannedAccessControlList.PublicRead)
          }
        }
      }
    }

    task convertSetupHtml(type: AsciidoctorTask) {
      dependsOn asciidoctorGemsPrepare

      inputs.dir "${rootProject.projectDir}/resources/templates/setup"

      asciidoctorj {
        options template_dirs: ["${rootProject.projectDir}/resources/templates/setup"]
        attributes 'parent-path': '/graphacademy/setup',
          'imagesdir': "https://s3.amazonaws.com/dev.assets.neo4j.com/course/${project.name}/images/",
          'document-metadata-attrs-include': 'author,slug,parent-path',
          'module-id': stage != 'production' ? "_testing_${project.name}" : project.name
      }

      baseDir file("${projectDir}/docs")
      sourceDir file("${projectDir}/docs")
      sources {
        include 'setup.adoc'
      }
      outputDir file("${projectDir}/build/setup")

      doLast {
        file("${projectDir}/build/setup/setup.html").renameTo("${projectDir}/build/setup/${project.name}.html")
      }
    }

    task convertSlides(type: AsciidoctorJRevealJSTask) {
      dependsOn asciidoctorGemsPrepare

      revealjsOptions {
        controls = false
        progressBar = true
        pushToHistory = true
        overviewMode = true
        touchMode = true
        theme = 'white'
      }

      asciidoctorj {
        requires "${rootProject.projectDir}/resources/extensions.rb"
        options template_dirs: ["${rootProject.projectDir}/resources/templates/slide"]
        // for no transition between slides add this line after imagesdir:
        // 'revealjs_transition': 'none',
        attributes 'revealjs_customtheme': 'themes/reveal.css',
          'imagesdir': 'images',
          'env-slides': '',
          'revealjs_transition': 'none',
          'revealjs_center': 'false',
          'revealjs_width': '1280',
          'revealjs_height': '720',
          'revealjs_margin': '0.05',
          'revealjs_fragmentinurl': 'true',
          'revealjs_slidenumber': 'c',
          'revealjs_minscale': '0.2',
          'revealjs_maxscale': '2'
      }

      plugins 'denehyg/menu.js', 'rajgoel/chalkboard/chalkboard.js'
      pluginConfigurationFile "${rootProject.projectDir}/resources/extensions/revealjs-extension-config.js"

      baseDirFollowsSourceDir()
      sourceDir file(sourceDocsRootPath)
      sources {
        excludes.addAll(['enrollment.adoc', 'setup.adoc'])
      }
      outputDir file("${projectDir}/build/slides")

      resources {
        from("${rootProject.projectDir}/resources/themes") {
          include 'reveal.css'
          into 'themes'
        }
        from("${rootProject.projectDir}/resources/extensions") {
          include 'cypher-highlightjs.js'
          into 'extensions'
        }
        from("${rootProject.projectDir}/resources/images") {
          include '**'
          into 'images'
        }
        from(sourceImagesDirPath) {
          include '**'
          into 'images'
        }
      }
    }

    task convertOnlinePdf(type: AsciidoctorPdfTask) {
      dependsOn asciidoctorGemsPrepare

      inputs.file "${rootProject.projectDir}/resources/themes/pdf-theme.yml"

      asciidoctorj {
        requires "${rootProject.projectDir}/resources/extensions.rb"
        modules.pdf.version '1.5.2'
        attributes 'pdf-style': "${rootProject.projectDir}/resources/themes/pdf-theme.yml",
          'imagesdir': '../images'
      }

      baseDir file(sourceDocsRootPath)
      sourceDir file(sourceDocsRootPath)
      sources {
        excludes.addAll(['enrollment.adoc', 'setup.adoc'])
      }
      outputDir file("${projectDir}/build/online")
    }

    /**
     * Copy svg images to "build/images-pdf" before generating a PDF.
     */
    task copySvgImagesPdf(type: Copy) {
      doFirst {
        mkdir "$buildDir/images-pdf"
      }

      from sourceImagesDirPath
      include '*.svg'
      into "$buildDir/images-pdf"
    }

    /**
     * Prepare the images before generating a PDF.
     *
     * Since high-resolution images consume a *lot* of memory while generating a PDF with Asciidoctor,
     * we downscale png and jpg/jpeg images using a max width and height in pixels.
     *
     * We rely on ImageMagick (more specifically `mogrify` command line) to downscale the images.
     * https://imagemagick.org/
     *
     * We also copy svg images to "build/images-pdf".
     */
    task prepareImagesPdf(type: Exec) {
      dependsOn copySvgImagesPdf

      inputs.dir sourceImagesDirPath
      inputs.files "${projectDir}/images/**"
      outputs.dir "$buildDir/images-pdf"
      outputs.files "$buildDir/images-pdf/**"

      workingDir sourceImagesDirPath

      def commandsArgs = []
      if (!fileTree(sourceImagesDirPath).filter { it.isFile() && it.getName().endsWith('.png') }.isEmpty()) {
        commandsArgs.push(['mogrify', '-path', "$buildDir/images-pdf", '-thumbnail', '1024x768>', '*.png'])
      }
      if (!fileTree(sourceImagesDirPath).filter { it.isFile() && it.getName().endsWith('.jpeg') }.isEmpty()) {
        commandsArgs.push(['mogrify', '-path', "$buildDir/images-pdf", '-thumbnail', '1024x768>', '*.jpeg'])
      }
      if (!fileTree(sourceImagesDirPath).filter { it.isFile() && it.getName().endsWith('.jpg') }.isEmpty()) {
        commandsArgs.push(['mogrify', '-path', "$buildDir/images-pdf", '-thumbnail', '1024x768>', '*.jpg'])
      }
      commandsArgs.push(['echo'])

      for (commandArgs in commandsArgs) {
        commandLine commandArgs
      }
    }

    /* single document */
    task convertSinglePdf(type: AsciidoctorPdfTask) {
      dependsOn asciidoctorGemsPrepare
      dependsOn prepareImagesPdf

      inputs.file "${rootProject.projectDir}/resources/themes/pdf-theme.yml"

      asciidoctorj {
        requires "${rootProject.projectDir}/resources/extensions.rb"
        inProcess 'IN_PROCESS'
        modules.pdf.version '1.5.2'
        attributes 'pdf-style': "${rootProject.projectDir}/resources/themes/pdf-theme.yml",
          'imagesdir': "${buildDir}/images-pdf"
      }

      baseDir file("${projectDir}/single-pdf")
      sourceDir file("${projectDir}/single-pdf")
      outputDir file("${projectDir}/build/single-pdf")
    }

    task convertSingleSlides(type: AsciidoctorJRevealJSTask) {
      dependsOn asciidoctorGemsPrepare

      revealjsOptions {
        controls = false
        progressBar = true
        pushToHistory = true
        overviewMode = true
        touchMode = true
        theme = 'white'
      }

      asciidoctorj {
        requires "${rootProject.projectDir}/resources/extensions.rb"
        options template_dirs: ["${rootProject.projectDir}/resources/templates/slide"]
        attributes 'revealjs_customtheme': 'themes/reveal.css',
          'imagesdir': 'images',
          'env-slides': '',
          'revealjs_center': 'false',
          'revealjs_width': '1280',
          'revealjs_height': '720',
          'revealjs_margin': '0.05',
          'revealjs_fragmentinurl': 'true',
          'revealjs_slidenumber': 'c',
          'revealjs_minscale': '0.2',
          'revealjs_maxscale': '2'
      }

      plugins 'denehyg/menu.js', 'rajgoel/chalkboard/chalkboard.js'
      pluginConfigurationFile "${rootProject.projectDir}/resources/extensions/revealjs-extension-config.js"

      baseDirFollowsSourceDir()
      sourceDir file("${projectDir}/single-slides")
      outputDir file("${projectDir}/build/single-slides")

      resources {
        from("${rootProject.projectDir}/resources/themes") {
          include 'reveal.css'
          into 'themes'
        }
        from("${rootProject.projectDir}/resources/extensions") {
          include 'cypher-highlightjs.js'
          into 'extensions'
        }
        from("${rootProject.projectDir}/resources/images") {
          include '**'
          into 'images'
        }
        from(sourceImagesDirPath) {
          include '**'
          into 'images'
        }
      }
    }

    task convert {
      dependsOn convertSetupHtml
      dependsOn convertOnlinePdf
      dependsOn convertSlides
    }

    task liveReload(type: LiveReloadTask) {
      docRoot "${projectDir}/build"
    }

    if (project.projectDir.parentFile.getName() != "browser-guides") {
      if (new File(sourceImagesDirPath).exists()) {
        if (stage == 'production') {
          task s3UploadImages(type: S3UploadTask) {
            overwrite = true
            source = sourceImagesDirPath
            bucket = "dev.assets.neo4j.com"
            destination = "course/${project.name}/images"
            acl.set(CannedAccessControlList.PublicRead)
          }
        } else if (stage == 'testing') {
          task s3UploadImages(type: S3UploadTask) {
            overwrite = true
            source = sourceImagesDirPath
            bucket = "dev.assets.neo4j.com"
            destination = "test-course/${project.name}/images"
            acl.set(CannedAccessControlList.PublicRead)
          }
        }
      }

      if (stage == 'production' || stage == 'testing') {
        task s3UploadSetup(type: S3UploadTask) {
          dependsOn convertSetupHtml
          overwrite = true
          source = "${projectDir}/build/setup"
          bucket = "graphacademy.neo4j.com"
          destination = "setup"
          acl.set(CannedAccessControlList.PublicRead)
        }
      }
    }

    task s3Upload dependsOn(tasks.names.findAll { it.startsWith("s3Upload") && it != "s3Upload" })
  }
}

